<% content_for :javascript_includes do %>
  <%= javascript_include_tag '/javascripts/yui3/yui/yui' %>


<style type="text/css">
	.catnestedlist {
		margin: 0px !important;
		padding: 2px;
		left:200px;
		/*position: relative;*/
	    width: 220px;
		/*background: #000;*/
		overflow:visible;
		/*border:1px solid #000;*/
	}
	.categoryname {
		display:inline-block;
		width:200px;
		/*position:relative;*/
		vertical-align:top;
		padding:5px;
		margin-bottom:3px;
		margin-left:5px;

	}
	.categoryname a {
		float:right;
		margin-left:4px;

	}
	.categorytext {
		width:120px;
     	height:auto;
		overflow:hidden;
		display:inline-block;
	}

	.categorytext a {
		font-family:"myriad pro",helvetica,arial,sans-serif;
		font-size:100%;
		text-decoration: none; 
		color: #fff !important;
		float:none;
	}

	.categorytext a:hover {
		text-decoration: underline; 
	}

	.catnestedlist li ul {
	    /*left:190px;*/
		/*position: relative;*/
		width:200px;
		/*top:-21px;*/
		min-height:30px;
		left:0px;
		display:inline-block;
		padding:0px;
		/*padding-right:3px;
		padding-top:0;
		padding-bottom:0px  !important;
		/*margin-top: -2px;
		/*padding-bottom:16px;*/
	}

	.catnestedlist li {
		position:relative;
/*		margin: 10px 4px 10px 4px;*/
		margin: 0px 4px 0px 0px;
		padding: 0px 4px 0px 0px;
		width:420px;
		min-height:20px;
		list-style: none;	
		cursor:default;
		/*border:1px solid #000;*/
        
	}
	.moveable {
		cursor:move !important;
	}
	#categoriesnl {
		margin:5px 5px 0px 5px !important;
		min-height:500px;
	}
	#categoriesnl ul {
		/*padding-bottom:20px;*/
	}


	.categories_content {
		overflow:auto;
	}

	</style>

<% end %>
<% content_for :javascript_bottom do %>
<script type="text/javascript">
YUI().use('dd-constrain', 'dd-proxy', 'dd-drop', 'dd-scroll', function(Y) {
	
	var updateCategory = function(event) {
		var drag = event.target;
		var dragNode = drag.get('node');
		var parent = dragNode.get('parentNode').get('id') ;
		var id = dragNode.one('ul').get('id');
		if ( parent.indexOf('yui') == -1)
		{
			YUI().use("io-base", function(Y) {
			var uri = 'update_parent_id?id='+id + '&parent_id='+parent;
		   	var cfg,
					request;
				// Create a configuration object for the synchronous transaction.
				cfg = {
					method: 'POST',
					sync: true,
					headers: {
							'Content-Type': 'application/json',
					}
				};

				/*
				 * var request will contain the following fields, when the
				 * transaction is complete:
				 * - id
				 * - status
				 * - statusText
				 * - getResponseHeader()
				 * - getAllResponseHeaders()
				 * - responseText
				 * - responseXML
				 * - arguments
				 */
				request = Y.io(uri, cfg);

			});
		}
	};
    //Listen for all drop:over events
    //Y.DD.DDM._debugShim = true;
	Y.DD.DDM.on('drop:over', function(e) {
	        //Get a reference to our drag and drop nodes
	        var drag = e.drag.get('node'),
	            drop = e.drop.get('node');
	        //Are we dropping on a li node?
		 	if (drop.get('tagName').toLowerCase() === 'li') {
					drop.one('ul').appendChild(drag);
		            //Resize this nodes shim, so we can drop on it later.
		            e.drop.sizeShim();
		    }
			else  if (drop.get('tagName').toLowerCase() === 'ul') {
					if(drag!=e.drop.get('node').get('parentNode')) {
						drop.appendChild(drag);
			        	e.drop.sizeShim();		
					}
		    }
	    });

    //Listen for all drag:start events
    Y.DD.DDM.on('drag:start', function(e) {
        //Get our drag object
        var drag = e.target;
        //Set some styles here
        drag.get('node').setStyle('opacity', '.25');
        drag.get('dragNode').set('innerHTML', drag.get('node').get('innerHTML'));
        drag.get('dragNode').setStyles({
            opacity: '.5',
			border: '0px'
        });
		drag.get('dragNode').all('ul li').setStyles({
            visibility: 'hidden'           
        });
    });
    //Listen for a drag:end events
    Y.DD.DDM.on('drag:end', function(e) {
        var drag = e.target;
        //Put out styles back
        drag.get('node').setStyles({
            visibility: '',
            opacity: '1'
        });	
		 updateCategory(e);
    });
    //Listen for all drag:drophit events
    Y.DD.DDM.on('drag:drophit', function(e) {
        var drop = e.drop.get('node'),
            drag = e.drag.get('node');
        //if we are not on an li, we must have been dropped on a ul
        //yconsole.log(drop.get('tagName').toLowerCase() );
        if (drop.get('tagName').toLowerCase() !== 'li') {
	 		//yconsole.log('drop: ' + drop);	
			drop.appendChild(drag);
				e.drop.sizeShim();
        }

    });
    //Static Vars

    //Get the list of li's in the lists and make them draggable
    var lis = Y.all('#categoriesnl .moveable');
    lis.each(function(v, k) {
        var dd = new Y.DD.Drag({
            node: v
        }).plug(Y.Plugin.DDProxy, {
            moveOnEnd: false
        }).plug(Y.Plugin.DDConstrained, {
            constrain2node: '#categoriesnl'
        });
    });

    //Create simple targets for the 2 lists.
    var uls = Y.all('#categoriesnl .droppable');
    uls.each(function(v, k) {
        var tar = new Y.DD.Drop({
            node: v,
			//Make it Drop target and pass this config to the Drop constructor
			target: {
			     padding: '0 0 0 20'
			}
        });
    });    
});

</script>
<% end %>
<div class="box box-first box-100 altbox "><!-- .altbox for alternative box's color -->
	<div class="boxin">
		<div class="header">
			<h3><%=  I18n.t('layout.categories.title') %></h3>
			<% if not  @categories.empty? %>
				<%= link_to I18n.t('layout.categories.new'), new_category_path ,:class => 'button'%>
			<% end%>
		</div>
		<div class="content categories_content">
			<% if not  @categories.empty? %>
			<div id="categoriesnl">
				<ul  class="catnestedlist droppable">

					<%= nodes(@categories,nil) %>					

				</ul>
			</div>
			<% else %>
				<div class="tc" style="margin:10px;">
					<%= link_to I18n.t('layout.categories.new'), new_category_path %>
				</div>
			<% end %>
		</div>
	</div>
</div>
